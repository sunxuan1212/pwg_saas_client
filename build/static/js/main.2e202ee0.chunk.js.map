{"version":3,"sources":["logo.svg","utils/noImageFound.png","component/layout/Layout_01.js","utils/component/confirmation.js","utils/Constants.js","component/header/Header_01.js","utils/component/Loading.js","utils/component/notification.js","component/page/Login.js","component/page/component/Page_01.js","component/page/component/InventoryFormTable.js","utils/ApolloClientAPI.js","utils/qiniuAPI.js","component/page/component/ProductForm.js","component/page/Products.js","component/page/Inventory.js","component/page/component/OrderInfo.js","component/page/Orders.js","component/page/Configuration.js","utils/component/PrivateRoute.js","utils/component/PublicRoute.js","utils/component/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout_01","props","id","className","header","children","footer","confirmation","type","content","callback","config","title","toUpperCase","icon","ExclamationCircleOutlined","okType","onCancel","destroyAll","defaultImage_system","require","handleConfigOuput","result","newDefaultImage","defaultImage","imageSrc","GET_USER_CACHE_QUERY","gql","SET_USER_CACHE_QUERY","useUserCache","useQuery","fetchPolicy","data","error","loading","console","log","user","setUserCache","client","theClient","DefaultClientAPI","writeQuery","query","GET_CONFIG_CACHE_QUERY","useConfigCache","setConfigCache","LOGOUT_MUTATION","Header_01","apolloClient","useApolloClient","routeHistory","useHistory","useMutation","onCompleted","logout","success","resetStore","then","useState","menuCollapsed","setMenuCollapsed","menuItem","name","route","data-header-collapsed","shape","ArrowLeftOutlined","rotate","map","aMenuItem","index","buttonProps","push","location","pathname","key","onClick","placement","getMenuItemDisplay","style","cursor","profile","LogoutOutlined","Loading","showLoading","LoadingOutlined","showMessage","message","description","notification","LOGIN_MUTATION","GET_USER_CONFIG_QUERY","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","login","fetchConfig","variables","configId","useLazyQuery","result2","userConfig","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","Item","label","rules","required","Password","valuePropName","htmlType","Page_01","rest","Fragment","Search","EditableContext","React","createContext","EditableRow","useForm","form","component","Provider","value","EditableCell","editable","dataIndex","record","handleSave","isVariant","restProps","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","e","a","validateFields","childNode","margin","width","height","ref","onPressEnter","onBlur","paddingRight","min","step","formatter","replace","parser","InventoryFormTable","productId","inventoryData","setInventoryData","productVariants","setProductVariants","newColModal","setNewColModal","handleRemoveColumn","selectedCol","restVariant","newInventory","anInventory","handleUpdatePublished","selectedRow","checked","preventDefault","updateIndex","aData","indexOf","update","published","$set","handleDeleteRow","filter","item","row","newData","findIndex","splice","components","body","cell","columnsObj","variantColKeys","Object","keys","defaultColumns","fixed","sorter","b","price","stock","align","render","text","textAlign","checkedChildren","unCheckedChildren","onChange","block","PlusOutlined","disabled","length","onConfirm","DeleteOutlined","aColKey","ellipsis","filterIcon","EditOutlined","filterDropdown","padding","display","visible","enterButton","CheckOutlined","defaultValue","onSearch","confirm","editVariant","marginLeft","onFilter","concat","getColumns","col","onCell","Date","getTime","_id","marginRight","marginBottom","rowClassName","bordered","dataSource","columns","size","pagination","scroll","x","bodyStyle","paddingBottom","onOk","newVariantValue","getFieldValue","variantName","newVariantId","resetFields","maxLength","ApolloClientAPI","middletierURL","cache","InMemoryCache","addTypename","ApolloClient","link","HttpLink","uri","credentials","params","Promise","resolve","reject","catch","err","mutation","mutate","QINIU_UPLOAD_TOKEN_QUERY","QINIU_BATCH_DELETE_QUERY","qiniuAPI","loadToken","qiniuToken","upload","file","fileObj","originFileObj","useCdnDomain","region","qiniu","z0","putExtra","fname","mimeType","response","uploadToken","subscribe","next","res","complete","batchDelete","images","imageMogr2","options","domain","Panel","Option","READ_PRODUCT_INVENTORY_QUERY","CREATE_NEW_PRODUCT_QUERY","DELETE_PRODUCT_QUERY","UPDATE_PRODUCT_QUERY","getImageFilesToModify","defaultArray","newArray","newImageToUpload","currentUploadedImages","imagesToDelete","allImages","anImage","newImageName","imageNameSplited","split","fav","anUploadedImage","delete","uploaded","getBase64","reader","FileReader","readAsDataURL","onload","onerror","ProductInfoForm","product","categories","refetch","modalProps","configCache","fileList","setFileList","previewVisible","setPreviewVisible","previewImage","setPreviewImage","productCategory","setProductCategory","newCategoryName","setNewCategoryName","modalVisible","productObj","assign","category","newCategoryFormat","aCategory","variants","readInventory","array","getDefaultImageArray","setModalFooter","getModalFooter","uploadButton","handleFavImageChange","newFileList","aFile","handlePreviewOpen","url","preview","inventory","flattenedInventory","restInventory","readInventoryResult","createProduct","deleteProduct","updateProduct","restValues","finalProductValue","foundSelectedCategory","find","imagesToBeModified","QiniuAPI","aNewImage","variantObj","aKey","hasOwnProperty","deletedInventory","aNewInventory","deleted","onDeleteProduct","onCategoryNameChange","target","addNewCategory","modalFooter","submit","unshift","defaultActiveKey","expandIconPosition","TextArea","rows","placeholder","labelInValue","allowClear","dropdownRender","menu","flexWrap","flex","trim","accept","beforeUpload","listType","multiple","onPreview","slice","fileLimit","isFav","StarFilled","color","StarOutlined","getPreviewModalFooter","alt","src","thumbUrl","ProductForm","closeModal","destroyOnClose","wrapClassName","overflow","GET_PRODUCTS_QUERY","UPDATE_PRODUCT_PUBLISH","UPDATE_INVENTORY_PUBLISH","Inventory","productFormModal","setProductFormModal","selectedProduct","setSelectedProduct","selectedItems","setSelectedItems","displaySelectionPanel","setDisplaySelectionPanel","selectedCategoryFilter","setSelectedCategoryFilter","createdAt","onError","productsData","refetchProducts","inventoryError","refetchInventory","updateProductPublish","updateInventoryPublish","handleOnClickProduct","format","newName","variantKeys","sum","aChild","rowSelection","selectedRowKeys","selectedRows","onSelect","selected","onSelectAll","changeRows","anItem","allCategories","products","aProduct","getAllProductCategory","tableData","inventoryWithKey","productInventory","getTableData","extra","minWidth","inventoryIds","productIds","ids","selectionPanel","OrderInfo","order","orientation","column","xxl","xl","lg","md","sm","xs","paid","sentOut","trackingNum","customer","contact","address","postcode","province","itemLayout","items","renderItem","variant","image","actions","qty","Meta","avatar","maxWidth","deliveryFee","total","paymentQRImage","flexGrow","border","TabPane","GET_ORDERS_QUERY","UPDATE_ORDER_PAYMENT_QUERY","UPDATE_ORDER_DELIVERY_QUERY","CANCEL_ORDER_QUERY","Orders","orderModalDisplay","setOrderModalDisplay","selectedOrder","setSelectedOrder","refetchOrders","updateOrderPayment","updateOrderDelivery","cancelOrder","whiteSpace","textDecoration","handleOrderModalDisplayOpen","filteredColumns","newOrders","paidOrders","completedOrders","updatedAt","filteredOrders","allOrders","orders","orderList1","orderList2","orderList3","anOrder","getFilteredOrders","tab","rowKey","UPDATE_CONFIG_QUERY","Configuration","updateConfig","uid","notice","delivery","handleSubmit","setter","paymentQRChanged","currentPaymentQRImage","paymentQRImageResult","newFileObject","customRequest","PrivateRoute","Component","routeLocation","useLocation","userResult","configResult","loggedIn","to","state","from","PublicRoute","restricted","PageNotFound","Component_Layout","Component_Header","App","setLoggedIn","exact","path","Boolean","window","hostname","match","GET_LOGGED_IN_USER","GET_USER_CONFIG","theClientAPI","restClient","writeData","doRender","userData","configData","ReactDOM","document","getElementById","loggedInUser","error2","run","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e202ee0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/noImageFound.3a5a71c0.png\";","import React from 'react';\n\nconst Layout_01 = (props) => {\n\n  return (\n    <div id=\"layout_01\">\n      <div className=\"wrapper layout_01-wrapper\">\n        <div className=\"header\">\n          {props.header ? props.header : null}\n        </div>\n        <div className=\"content\">\n          {props.children ? props.children : null}\n          <div className=\"footer\">\n            {props.footer ? props.footer : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout_01;","\nimport React from 'react';\nimport { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleOutlined\n} from '@ant-design/icons';\n\nconst confirmation = (type, content, callback = null) => {\n  // type: confirm/warning/info/error\n  const config = {\n    title: type && typeof(type) == 'string' ? type.toUpperCase() : \"...\",\n    icon: <ExclamationCircleOutlined />,\n    content: content,\n    okType: 'danger',\n    onCancel: ()=>{\n      Modal.destroyAll();\n    }\n  };\n  if (callback != null) {\n    config['onOk'] = callback;\n  }\n  Modal[type](config);\n}\n\nexport default confirmation;","import { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport DefaultClientAPI from '../index';\n\n// export const MIDDLETIER_URL = \"http://localhost:3000/graphql\";\nexport const MIDDLETIER_URL = \"http://15.165.150.23/graphql\";\n\nexport const defaultImage_system = require(\"./noImageFound.png\");\n\n\nexport const getAllProductCategory = (products) => {\n  let result = [];\n  products.map((aProduct)=>{\n    if (aProduct.category && aProduct.category.length > 0) {\n      aProduct.category.map((aCategory)=>{\n        // let catKeys = Object.keys(aCategory)\n        // if (catKeys.indexOf('key') >= 0) {\n        //   console.log('aProduct', aProduct.name)\n        // }\n        let foundPushedItem = result.find((anItem)=>anItem._id == aCategory._id);\n        if (!foundPushedItem) {\n          result.push(aCategory);\n        }\n      })\n    }\n  });\n  return result;\n}\n\nconst handleConfigOuput = (config = null) => {\n  let result = null;\n  if (config) {\n    result = {...config}\n    let newDefaultImage = defaultImage_system;\n    if (result.defaultImage && result.defaultImage != \"\") {\n      newDefaultImage = result.imageSrc + result.defaultImage;\n    }\n    result['defaultImage'] = newDefaultImage;\n  }\n  return result;\n}\n\n// User Cache ---------------------------- start\nconst GET_USER_CACHE_QUERY = gql`\n  query user {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`\nconst SET_USER_CACHE_QUERY = gql`\n  query user {\n    user {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`\n\nexport const useUserCache = () => {\n  const  { data, error, loading } = useQuery(GET_USER_CACHE_QUERY,{\n    fetchPolicy: 'cache-only'\n  });\n\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useUserCache',error);\n  }\n  if (data && data.user) {\n    result = data.user;\n  }\n  return result;\n}\n\nexport const setUserCache = (data, client=null) => {\n  let theClient = DefaultClientAPI.client;\n  if (client != null) {\n    theClient = client;\n  }\n  theClient.writeQuery({\n    query: SET_USER_CACHE_QUERY,\n    data: {\n      user: data\n    }\n  });\n  // theClient.writeData({\n  //   data: {\n  //     user: data\n  //   }\n  // });\n}\n\n// export const getUserCache = (client=null) => {\n//   let result = null;\n//   let theClient = DefaultClientAPI.client;\n//   if (client != null) {\n//     theClient = client;\n//   }\n//   try {\n//     result = theClient.readQuery({\n//       query: GET_USER_CACHE_QUERY\n//     },true)\n//   }\n//   catch (e) {\n//     result = null;\n//   }\n\n//   return result;\n// }\n\n\n// User Cache ---------------------------- end\n// Config Cache ---------------------------- start\nconst GET_USER_CONFIG_QUERY = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\nconst GET_CONFIG_CACHE_QUERY = gql`\n  query config {\n    config @client {\n      _id\n      configId\n      defaultImage\n      defaultImage_system\n      imageSrc\n      paymentQRImage\n      server\n      profile {\n        name\n        notice\n      }\n      delivery\n    }\n  }\n`\nconst SET_CONFIG_CACHE_QUERY = gql`\n  query config {\n    config {\n      _id\n      configId\n      defaultImage\n      defaultImage_system\n      imageSrc\n      paymentQRImage\n      server\n      profile {\n        name\n        notice\n      }\n      delivery\n    }\n  }\n`\nexport const useConfigCache = () => {\n  const { data, error, loading } = useQuery(GET_CONFIG_CACHE_QUERY,{\n    fetchPolicy: 'cache-only'\n  });\n\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useConfigCache',error);\n  }\n  if (data && data.config) {\n    result = data.config;\n  }\n  return result;\n}\n\nexport const setConfigCache = (data, client=null) => {\n  let theClient = DefaultClientAPI.client;\n  if (client != null) {\n    theClient = client;\n  }\n  theClient.writeQuery({\n    query: GET_CONFIG_CACHE_QUERY,\n    data: {\n      config: handleConfigOuput(data)\n    }\n  });\n  // theClient.writeData({\n  //   data: {\n  //     config: handleConfigOuput(data)\n  //   }\n  // });\n}\n\n// export const getConfigCache = (client=null) => {\n//   let result = null;\n//   let theClient = DefaultClientAPI.client;\n//   if (client != null) {\n//     theClient = client;\n//   }\n//   try {\n//     result = theClient.readQuery({\n//       query: SET_CONFIG_CACHE_QUERY\n//     },true) \n//   }\n//   catch (e) {\n//     result = null;\n//   }\n\n//   return result;\n// }\n\nexport const useConfigQuery = (input) => {\n  // const [ getConfig, { data, error, loading } ] = useLazyQuery(GET_USER_CONFIG_QUERY,{\n  const { data, error, loading } = useQuery(GET_USER_CONFIG_QUERY,{\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      configId: input\n    },\n    onCompleted: (result) => {\n      if (result && result.userConfig && result.userConfig.success) {\n        setConfigCache(result.userConfig.data)\n      }\n    }\n  });\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useConfigQuery',error);\n  }\n  if (data && data.userConfig) {\n    result = handleConfigOuput(data.userConfig);\n  }\n  return result;\n}\n// Config Cache ---------------------------- end\n\n\n// const GET_LOGGED_IN_USER = gql`\n//   query loggedInUser{\n//     loggedInUser{\n//         success\n//         message\n//         data\n//     }\n//   }\n// `\n// export const useUserQuery = () => {\n//   const [getUser, { data, error, loading }] = useLazyQuery(GET_LOGGED_IN_USER,{\n//     //fetchPolicy: 'cache-and-network'\n//   });\n\n//   let result = null;\n//   if (loading) {\n//     console.log('loading');\n//   }\n//   if (error) {\n//     console.log(error);\n//   }\n//   if (data && data.user) {\n//     result = data.user;\n//   }\n//   return result;\n// }","import React, { useState } from 'react';\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { useHistory } from \"react-router-dom\";\nimport { Menu, Button, Tooltip } from 'antd';\nimport {\n  ArrowLeftOutlined,\n  LogoutOutlined\n} from '@ant-design/icons';\nimport confirmation from '../../utils/component/confirmation';\nimport { useConfigCache, setConfigCache, setUserCache } from '../../utils/Constants';\n\nconst LOGOUT_MUTATION = gql`\n    mutation logout {\n      logout {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst Header_01 = (props) => {\n  const apolloClient = useApolloClient();\n  let routeHistory = useHistory();\n  const config = useConfigCache();\n  const [logout] = useMutation(LOGOUT_MUTATION, {\n    onCompleted: (result) => {\n      if (result && result.logout && result.logout.success) {\n        let redirectPath = '/login';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n        \n        apolloClient.resetStore().then(()=>{\n          setConfigCache(null)\n          setUserCache(null)\n          // routeHistory.push(redirectPath)\n\n        })\n        // apolloClient.clearStore()\n      }\n    }\n  });\n\n  const [menuCollapsed, setMenuCollapsed] = useState(false);\n  const handleMenuOpen = () => {\n    setMenuCollapsed(true)\n  }\n  const handleMenuClose = () => {\n    setMenuCollapsed(false)\n  }\n\n  const handleLogout = () => {\n    confirmation('confirm', 'Confirm Logout?', ()=>{\n      logout();\n    })\n  }\n\n  const menuItem = [\n    // {\n    //   name: 'Products',\n    //   icon: null,\n    //   route: '/products'\n    // },\n    {\n      name: 'Inventory',\n      icon: null,\n      route: '/'\n    },\n    {\n      name: 'Orders',\n      icon: null,\n      route: '/orders'\n    },\n    {\n      name: 'Configuration',\n      icon: null,\n      route: '/configuration'\n    }\n  ]\n\n  const getMenuItemDisplay = () => {\n    let result = [];\n    menuItem.map((aMenuItem,index)=>{\n      let buttonProps = {\n        shape: 'circle'\n      }\n      if (menuCollapsed) {\n        buttonProps['shape'] = 'circle';\n      }\n      else {\n        buttonProps['type'] = 'link'\n      }\n      result.push(\n        <div className={`header_01-item ${routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}`} key={index} onClick={()=>{\n          routeHistory.push(aMenuItem.route)\n          }}>\n          {\n            menuCollapsed ? \n            <Tooltip title={aMenuItem.name} placement=\"right\">\n              <Button {...buttonProps}>{aMenuItem.name[0].toUpperCase()}</Button>\n            </Tooltip>\n            : <span className={routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}>{aMenuItem.name}</span>\n          }\n        </div>\n      )\n    });\n    return result;\n  }\n\n  return (\n    <header id=\"header_01\" data-header-collapsed={menuCollapsed}>\n      <div className=\"header_01-header\">\n        <div className=\"header_01-item collapse-btn\">\n           <Button \n              shape=\"circle\" \n              type=\"link\"\n              shape=\"circle\"\n              icon={<ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} />} \n              onClick={menuCollapsed ? handleMenuClose : handleMenuOpen}\n            />\n          {/* <ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} onClick={menuCollapsed ? handleMenuClose : handleMenuOpen} /> */}\n        </div>\n      </div>\n\n      <div className=\"header_01-content\">\n        {getMenuItemDisplay()}\n      </div>\n      <div className=\"header_01-footer\">\n        {\n          config && !menuCollapsed ? (\n            <div className=\"header_01-item\" style={{cursor: 'default'}}>\n              { config.profile.name }\n            </div>\n          ) : null\n        }\n        <div className=\"header_01-item\" onClick={handleLogout}>\n          {\n            menuCollapsed ?\n                <Tooltip title=\"Logout\" placement=\"right\">\n                  <Button \n                    shape=\"circle\" \n                    icon={<LogoutOutlined />} \n                  />\n                </Tooltip>\n              : \n              <span>Logout</span>\n          }\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header_01;","import React, {useState} from 'react';\nimport {\n  LoadingOutlined\n} from '@ant-design/icons';\n\nconst Loading = (props) => {\n  const [showLoading, setShowLoading] = useState(true);\n\n  if (showLoading) {\n    return (\n      <div className=\"loading\">\n        <LoadingOutlined/>\n      </div>\n    )\n  }\n  return null;\n}\n\nexport default Loading;","import { notification } from 'antd';\n\nexport const showMessage = ({ type='info', message, description })=>{\n  let options = {};\n  if(type ===\"error\"){\n    options = {\n      duration: 6\n    }\n  }\n  // type: success,error,info,warning\n  notification[type]({\n    //message: (<Alert message={message} type={type} />),\n    message: message,\n    //description: description,\n    //className: `notification-${type}`,\n    //...options\n  });\n}","import React from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { useHistory } from \"react-router-dom\";\n\nimport Loading from '../../utils/component/Loading';\nimport { setUserCache, setConfigCache } from '../../utils/Constants';\nimport * as notification from '../../utils/component/notification';\n\nconst LOGIN_MUTATION = gql`\n    mutation login($user: JSONObject) {\n      login(user: $user) {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst GET_USER_CONFIG_QUERY = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Login = (props) => {\n  let routeHistory = useHistory();\n  const [login, { data, loading }] = useMutation(LOGIN_MUTATION,{\n    onCompleted: (result)=>{\n      if (result && result.login && result.login.success) {\n        let redirectPath = '/';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n        fetchConfig({\n          variables: {\n            configId: result.login.data.configId\n          }\n        })\n        // routeHistory.push(redirectPath)\n      }\n      else {\n        notification.showMessage({type: 'error',message: \"Failed to login\"})\n      }\n    } \n  });\n\n  const [ fetchConfig ] = useLazyQuery(GET_USER_CONFIG_QUERY,{\n    fetchPolicy: 'cache-and-network',\n    onCompleted: (result2) => {\n      if (result2 && result2.userConfig && result2.userConfig.success) {\n        setConfigCache(result2.userConfig.data)\n        setUserCache(data.login)\n      }\n    }\n  });\n\n  const onFinish = values => {\n    login({\n      variables: { user: values }\n    });\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <div id=\"page_login\">\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"账号\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            登入\n          </Button>\n        </Form.Item>\n      </Form>\n      {\n        loading ? <Loading/> : null\n      }\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport { PageHeader } from 'antd';\n\nconst Page_01 = (props) => {\n  const {children, ...rest} = props;\n  return (\n    <React.Fragment>\n      <div id=\"page_01\">\n        <PageHeader\n          {...rest}\n        >\n          {props.children}\n        </PageHeader>\n      </div>\n    </React.Fragment>\n  )\n  // return (\n  //   <React.Fragment>\n  //     <div id=\"page_01\">\n  //       <PageHeader\n  //         {...rest}\n  //       >\n  //       </PageHeader>\n  //       {props.children}\n  //     </div>\n  //   </React.Fragment>\n  // )\n}\n\nexport default Page_01;","import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form, InputNumber, Modal, Tooltip, Switch } from 'antd';\nimport { DeleteOutlined, PlusOutlined, EditOutlined, CheckOutlined } from '@ant-design/icons';\nimport update from 'immutability-helper';\n\nconst { Search } = Input;\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  isVariant = false,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n  if (isVariant) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n          width: '100%',\n          height: '100%'\n        }}\n        name={dataIndex}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n  else {\n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{\n            margin: 0,\n            width: '100%',\n            height: '100%'\n          }}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ]}\n        >\n          {\n            dataIndex == 'price' ?\n              <InputNumber \n                ref={inputRef} \n                min={0} \n                step={1} \n                formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                onPressEnter={save} \n                onBlur={save}\n              /> \n              : dataIndex == 'stock' ? \n                <InputNumber \n                  ref={inputRef} \n                  min={0} \n                  step={1} \n                  onPressEnter={save} \n                  onBlur={save}\n                />\n                : <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n          }\n        </Form.Item>\n      ) : (\n        <div\n          className=\"editable-cell-value-wrap\"\n          style={{\n            paddingRight: 24,\n          }}\n          onClick={toggleEdit}\n        >\n          {children}\n        </div>\n      );\n    }\n  }\n\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nconst InventoryFormTable = (props) => {\n  const { productId, inventoryData, setInventoryData, productVariants, setProductVariants } = props;\n  \n  const [ selectedRows, setSelectedRows ] = useState([]);\n\n  const [ newColModal, setNewColModal ] = useState(false);\n  const [ form ] = Form.useForm();\n\n  const maxInventory = 20;\n  const maxVariants = 4;\n\n  const getColumns = () => {\n    let result = [];\n    let variantColKeys = Object.keys(productVariants);\n\n    let defaultColumns = [\n      {\n        title: 'Price',\n        dataIndex: 'price',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.price - b.price\n        },\n      },\n      {\n        title: 'Stock',\n        dataIndex: 'stock',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.stock - b.stock\n        },\n      },\n      {\n        title: 'Published',\n        dataIndex: 'published',\n        width: 100,\n        fixed: 'right',\n        align: 'center',\n        render: (text, record) => {\n          return (\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>\n                <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" checked={record.published} onChange={(checked, e)=>{handleUpdatePublished(record, checked, e)}} />\n              </div>\n          )\n          // return (\n          //   record.published ? <Tag color=\"green\">ON</Tag> : <Tag color=\"red\">OFF</Tag>\n          // )\n        } \n      },\n      // {\n      //   title: \"Add Variant\",\n      //   dataIndex: 'operation',\n      //   width: 50,\n      //   align: 'center',\n      //   fixed: 'right',\n      //   filterIcon: (<PlusOutlined />),\n      //   filterDropdown: (props) => {\n      //     const editVariant = (value) => {\n      //       props.confirm();\n      //       if (value) {\n      //         let newVariantId = 'v' + new Date().getTime();\n      //         setProductVariants({...productVariants, [newVariantId]: value});\n      //       }\n      //     }\n      //     return (\n      //       <div style={{padding: '10px', display: 'flex'}}>\n      //         {\n      //           props.visible ? \n      //             <Search\n      //               enterButton={(<CheckOutlined />)}\n      //               onSearch={editVariant}\n      //               //size=\"small\"\n      //             />\n      //           : null\n      //         }\n      //       </div>\n      //     )\n      //   }, \n      //   render: (text, record) =>\n      //     inventoryData.length >= 1 ? (\n      //       <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n      //         <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n      //       </Popconfirm>\n      //     ) : null,\n      // },\n      {\n        title: (\n          <Tooltip title=\"New Variant\">\n            <Button\n              onClick={()=>{setNewColModal(true)}}\n              block\n              type='link'\n              icon={(<PlusOutlined/>)}\n              disabled={variantColKeys.length < maxVariants ? false : true}\n            />\n          </Tooltip>\n        ),\n        dataIndex: 'operation',\n        width: 50,\n        align: 'center',\n        fixed: 'right',\n        render: (text, record) =>\n          inventoryData.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n            </Popconfirm>\n          ) : null,\n      }\n    ];\n\n    // result.push(\n    //   {\n    //     title: 'SKU',\n    //     dataIndex: 'sku',\n    //     width: 150,\n    //     editable: true,\n    //   }\n    // );\n\n    if (variantColKeys && variantColKeys.length > 0) {\n      variantColKeys.map((aColKey)=>{\n        result.push(\n          {\n            title: productVariants[aColKey],\n            dataIndex: aColKey,\n            editable: true,\n            isVariant: true,\n            width: 150,\n            ellipsis: true,\n            sorter: (a, b) => {\n              if (a[aColKey] > b[aColKey]) {\n                  return -1;\n              }\n              if (b[aColKey] > a[aColKey]) {\n                  return 1;\n              }\n              return 0;\n              // return a[aColKey] > b[aColKey]\n            },\n            filterIcon: (<EditOutlined />),\n            filterDropdown: (props) => {\n              const editVariant = (value) => {\n                props.confirm();\n                setProductVariants({...productVariants, [aColKey]: value});\n              }\n              const removeVariant = () => {\n                props.confirm();\n                handleRemoveColumn(aColKey)\n              }\n              return (\n                <div style={{padding: '10px', display: 'flex'}}>\n                  {\n                    props.visible ? \n                    <React.Fragment>\n                      <Search\n                        enterButton={(<CheckOutlined />)}\n                        defaultValue={productVariants[aColKey]}\n                        onSearch={value => editVariant(value)}\n                        //size=\"small\"\n                      />\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={removeVariant}>\n                        <Button type=\"danger\" icon={<DeleteOutlined/>} style={{marginLeft: '5px'}} />\n                      </Popconfirm>\n                    </React.Fragment>\n                    : null\n                  }\n                </div>\n              )\n            }, \n            onFilter: () => {\n              console.log(\"on filter ok\")\n            }\n          }\n        )\n      })\n    }\n    \n    return result.concat(defaultColumns);\n  }\n\n  const handleAddColumn = () => {\n    let newVariantValue = form.getFieldValue();\n    if (newVariantValue && newVariantValue.variantName) {\n      let newVariantId = 'v' + new Date().getTime();\n      setProductVariants({...productVariants, [newVariantId]: newVariantValue.variantName})\n      form.resetFields()\n    }\n    setNewColModal(false);\n  }\n\n  const handleRemoveColumn = (selectedCol) => {\n    const {[selectedCol]: removedCol, ...restVariant} = productVariants;\n    setProductVariants(restVariant)\n    \n    let newInventory = inventoryData.map((anInventory)=>{\n      delete anInventory[selectedCol];\n      return anInventory;\n    })\n    setInventoryData(newInventory)\n  }\n\n  const handleUpdatePublished = (selectedRow, checked, e) => {\n    e.preventDefault();\n    let updateIndex = inventoryData.map((aData)=>aData.key).indexOf(selectedRow.key);\n    setInventoryData(update(inventoryData, {[updateIndex]: {published: {$set: checked}}}));\n  }\n\n  const handleDeleteRow = key => {\n    setInventoryData(inventoryData.filter(item => item.key !== key))\n  };\n\n  const handleAddRow = () => {\n    let newId = new Date().getTime()\n    let defaultData = {\n      key: newId,\n      _id: null,\n      price: 0,\n      stock: 0,\n      published: false,\n      productId: productId\n    };\n    let result = defaultData;\n    if (inventoryData.length > 0) {\n      const {key, _id, published, ...rest} = inventoryData[inventoryData.length - 1];\n      result = {...result, ...rest};\n    }\n    \n    setInventoryData([...inventoryData, result]);\n  };\n\n  const handleSave = row => {\n    const newData = [...inventoryData];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    setInventoryData(newData);\n  };\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  const columnsObj = getColumns().map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        isVariant: col.isVariant,\n        handleSave: handleSave,\n      }),\n    };\n  });\n\n  const onSelectChange = (selectedRowKeys,selectedRows) => {\n    setSelectedRows(selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRows,\n    onChange: onSelectChange,\n    fixed: true\n  };\n\n  return (\n    <div className=\"inventoryTable-main\">\n      <Button\n        onClick={handleAddRow}\n        type=\"primary\"\n        style={{\n          marginRight: 16,\n          marginBottom: 16,\n        }}\n        disabled={inventoryData.length < maxInventory ? false : true}\n        icon={<PlusOutlined/>}\n      >\n        Item\n      </Button>\n      \n      <Table\n        //rowKey={'_id'}\n        components={components}\n        rowClassName={() => 'editable-row'}\n        bordered\n        dataSource={inventoryData}\n        columns={columnsObj}\n        //rowSelection={rowSelection}\n        size={\"small\"}\n        pagination={false}\n        scroll={{ x: (columnsObj.length - 4) * 150 }}\n      />\n        {/* footer={(currentPageData)=>{\n          return (\n            <div>Selecting {selectedRows.length} of {inventoryData.length}</div>\n          )\n        }} */}\n      <Form form={form}>\n      <Modal\n        title=\"New Variant\"\n        width={300}\n        bodyStyle={{paddingBottom: 0}}\n        visible={newColModal}\n        onOk={handleAddColumn}\n        onCancel={()=>{setNewColModal(false)}}\n        //forceRender\n      >\n       \n          <Form.Item \n            name=\"variantName\"\n            rules={[\n              {\n                required: true,\n                message: `Name is required.`,\n              }\n            ]}\n          >\n            <Input maxLength={8}/>\n          </Form.Item>\n      </Modal>\n      </Form>\n    </div>\n  );\n}\n\n\nexport default InventoryFormTable;","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from 'graphql-tag';\n\nimport { MIDDLETIER_URL } from './Constants';\n\nexport default function ApolloClientAPI(middletierURL = null) {\n  const cache = new InMemoryCache({ addTypename: false });\n  const client = new ApolloClient({\n    cache,\n    link: new HttpLink({\n        uri: middletierURL ? middletierURL : MIDDLETIER_URL,\n        credentials: \"include\"\n    })\n  });\n\n  return {\n    client: client,\n    cache: cache,\n    query: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.query({\n          variables: params,\n          query: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n    mutation: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.mutate({\n          variables: params,\n          mutation: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n  }\n}\n","import * as qiniu from 'qiniu-js';\nimport ApolloClientAPI from './ApolloClientAPI';\nimport gql from 'graphql-tag';\n\nconst QINIU_UPLOAD_TOKEN_STATE = gql`\n  {\n    qiniu @client {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_UPLOAD_TOKEN_QUERY = gql`\n  {\n    qiniuToken {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_BATCH_DELETE_QUERY = gql`\n  mutation qiniuBatchDelete($images: [String!]) {\n    qiniuBatchDelete(images: $images) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst qiniuAPI = async (loadToken = true) => {\n  const apolloClient = ApolloClientAPI();\n  let qiniuToken = \"\";\n  if (loadToken) {\n    qiniuToken = await apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result=>result).catch(err=>{});\n  }\n  return {\n    upload: async (file) => {\n      let fileObj = file.originFileObj\n      var config = {\n        useCdnDomain: true,\n        region: qiniu.region.z0\n      };\n      var putExtra = {\n        fname: \"\",\n        params: {},\n        mimeType: [\"image/png\", \"image/jpeg\", \"image/gif\"]\n      };\n      let key = file.name;\n      return new Promise((resolve, reject) => {\n        if (qiniuToken) {\n          let response = qiniuToken.data.qiniuToken;\n          if (response.success) {\n            let uploadToken = response.data;\n            let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n\n            observable.subscribe({\n              next(res){\n                console.log('next(res)',res)\n              },\n              error(err){\n                console.log('error(err)',err)\n                reject(err)\n              }, \n              complete(res){\n                console.log('complete(res)',res)\n                resolve(res)\n              }\n            })\n          }\n        }\n        else {\n          reject(\"Error getting token\")\n        }\n        // apolloClient.query(QINIU_UPLOAD_TOKEN_STATE).then(result=>{\n        //   console.log('result',result)\n        //   let response = result.data.qiniu;\n        //   if (response.success) {\n        //     let uploadToken = response.data;\n        //     let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n          \n        //     observable.subscribe({\n        //       next(res){\n        //         //console.log('next(res)',res)\n        //       },\n        //       error(err){\n        //         console.log('error(err)',err)\n        //         reject(err)\n        //       }, \n        //       complete(res){\n        //         console.log('complete(res)',res)\n        //         resolve(res)\n        //       }\n        //     })\n        //   }\n        // }).catch(err=>{\n        //   console.log('cached qiniu token not found',err)\n          \n        //   apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result2=>{\n        //     console.log('result2',result2)\n        //     // apolloClient.client.writeQuery({ UPDATE_QINIU_UPLOAD_TOKEN_QUERY, data });\n        //     apolloClient.cache.writeData({data: {qiniu:result2.data.qiniuToken}})\n        //     let response2 = result2.data.qiniuToken;\n        //     if (response2.success) {\n        //       let uploadToken = response2.data;\n        //       let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n  \n        //       observable.subscribe({\n        //         next(res){\n        //           console.log('next(res)',res)\n        //         },\n        //         error(err){\n        //           console.log('error(err)',err)\n        //           reject(err)\n        //         }, \n        //         complete(res){\n        //           console.log('complete(res)',res)\n        //           resolve(res)\n        //         }\n        //       })\n        //     }\n        //   }).catch(err2=>{\n        //     console.log('err2',err2)\n        //     reject(err2)\n        //   })\n        // })\n\n      })\n\n    },\n    batchDelete: async (images) => {\n      return new Promise((resolve, reject) => {\n        apolloClient.mutation(QINIU_BATCH_DELETE_QUERY,{\n          images: images\n        })\n        .then(result=>resolve(result))\n        .catch(err=>{\n          console.log(err);\n          reject(err)\n        });\n      })\n    },\n\n    imageMogr2: (options, key, domain) => {\n      return qiniu.imageMogr2(options, key, domain);\n    }\n  }\n}\n\nexport default qiniuAPI;","import React, {useState, useEffect} from 'react';\nimport { Button, Form, Input, Upload, Modal, Switch, Collapse, Select, Divider } from 'antd';\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { PlusOutlined, StarOutlined, StarFilled } from '@ant-design/icons';\nimport gql from \"graphql-tag\";\n\nimport confirmation from '../../../utils/component/confirmation';\nimport { showMessage } from '../../../utils/component/notification';\nimport InventoryFormTable from './InventoryFormTable';\n\nimport qiniuAPI from '../../../utils/qiniuAPI';\nimport { useConfigCache } from '../../../utils/Constants';\n// import ApolloClientAPI from '../../../utils/ApolloClientAPI';\n\nconst { Panel } = Collapse;\nconst { Option } = Select;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject, $configId: String) {\n    inventory(filter: $filter, configId: $configId) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst CREATE_NEW_PRODUCT_QUERY = gql`\n  mutation createProduct($product: JSONObject!) {\n    createProduct(product: $product) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst DELETE_PRODUCT_QUERY = gql`\n  mutation deleteProduct($_id: String!) {\n    deleteProduct(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_QUERY = gql`\n  mutation updateProduct($product: JSONObject!, $inventory: [JSONObject!]) {\n    updateProduct(product: $product, inventory: $inventory) {\n      success\n      message\n      data\n    }\n  }\n`;\n\n// convert db image obj to match Upload Component format\nconst getDefaultImageArray = (array, config) => {\n  let imageSrc = config.imageSrc;\n  return array.map((anImage)=>{\n    anImage['uid'] = anImage.name;\n    anImage['url'] = imageSrc + anImage.name;\n    anImage['thumbUrl'] = imageSrc + anImage.name;\n    if (anImage.fav) {\n      //anImage['status'] = 'done';\n    }\n    return anImage;\n  })\n}\n\n// mainly for image upload/delete in qiniu\nconst getImageFilesToModify = (defaultArray = [], newArray = []) => {\n  let newImageToUpload = [];\n  let currentUploadedImages = [];\n  let imagesToDelete = []\n  let allImages = []\n\n  newArray.map((anImage,index)=>{\n    // new image to be uploaded\n    let newImageName = anImage.name;\n    if (anImage.originFileObj) {\n      let imageNameSplited = newImageName.split('.');\n      newImageName = `saas_${index}_${new Date().getTime()}_${imageNameSplited[imageNameSplited.length - 2]}.${imageNameSplited[imageNameSplited.length - 1]}`;\n      anImage['name'] = newImageName;\n      newImageToUpload.push(anImage)\n    }\n    // uploaded images\n    else {\n      currentUploadedImages.push(anImage)\n    }\n    // convert Upload Component image obj to match db format\n    allImages.push({\n      name: newImageName,\n      fav: anImage.fav ? anImage.fav : false\n    })\n  });\n\n  defaultArray.map((anImage)=>{\n    let foundIndex = currentUploadedImages.map((anUploadedImage)=>anUploadedImage.name).indexOf(anImage.name);\n    if (foundIndex < 0) {\n      imagesToDelete.push(anImage);\n    }\n  })\n\n  return {\n    upload: newImageToUpload,\n    delete: imagesToDelete,\n    allImages: allImages,\n    uploaded: defaultArray\n  };\n}\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst ProductInfoForm = (props) => {\n  const {product = null, categories, refetch, ...modalProps} = props;\n  const configCache = useConfigCache();\n  const fileLimit = 4;\n\n  const [ form ] = Form.useForm();\n  const [ fileList, setFileList ] = useState([]);\n  const [ previewVisible, setPreviewVisible ] = useState(false);\n  const [ previewImage, setPreviewImage ] = useState(null);\n\n  // inventory\n  const [ inventoryData, setInventoryData ] = useState([]);\n  const [ productCategory, setProductCategory ] = useState([]);\n  const [ newCategoryName, setNewCategoryName ] = useState('');\n  const [ productVariants, setProductVariants ] = useState({'sku': 'SKU'});\n\n  useEffect(() => {\n    if (modalProps.modalVisible) {\n      setProductCategory(categories)\n\n      if (product) {\n        let productObj = Object.assign({},product);\n        if (product.category && product.category.length > 0) {\n          let newCategoryFormat = product.category.map((aCategory)=>{\n            return {\n              key: aCategory._id,\n              label: aCategory.name\n            }\n          })\n          productObj['category'] = newCategoryFormat[0];\n        }\n        form.setFieldsValue(productObj);\n        if (product.variants) {\n          setProductVariants(product.variants)\n        }\n  \n        readInventory({\n          variables: {\n            filter: {\n              filter: { productId: product._id }\n            },\n            configId: configCache.configId\n          }\n        });\n        if (product.images && product.images.length > 0) {\n          setFileList(getDefaultImageArray(product.images, configCache));\n        }\n      }\n    }\n    else {\n      form.resetFields();\n    }\n    modalProps.setModalFooter(getModalFooter());\n    \n  }, [modalProps.modalVisible]);\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  );\n\n  const handleFileListChange = ({ fileList, ...rest }) => {\n    let result = fileList.map((aFile)=>{\n      if (aFile.fav) {\n        //aFile['status'] = 'done';\n      }\n      return aFile;\n    });\n    if (fileList.length > fileLimit) {\n      result = fileList.slice(0, fileLimit-1);\n    }\n    if (result.length > 0) {\n      let foundFavImage = result.find((anImage)=>anImage.fav);\n      if (!foundFavImage) {\n        result[0]['fav'] = true;\n      }\n    }\n    setFileList(result)\n  };\n\n  const handleFavImageChange = () => {\n    let newFileList = [].concat(fileList)\n    newFileList.map((aFile)=>{\n      if (aFile.name == previewImage.name) {\n        aFile['fav'] = true;\n      }\n      else {\n        aFile['fav'] = false;\n      }\n      return aFile;\n    });\n    setFileList(newFileList);\n  }\n\n  const handlePreviewOpen = async (file) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewVisible(true);\n    setPreviewImage(file);\n  };\n\n  const handlePreviewClose = () => {\n    setPreviewVisible(false);\n  }\n\n  const [ readInventory, readInventoryResult ] = useLazyQuery(READ_PRODUCT_INVENTORY_QUERY,{\n    fetchPolicy: \"cache-and-network\",\n    onCompleted: (result) => {\n      if (result && result.inventory) {\n        let flattenedInventory = [];\n        result.inventory.map((anInventory,index)=>{\n          const { variants, ...restInventory } = anInventory;\n          let newInventory = {...restInventory, ...variants, key: restInventory._id};\n          flattenedInventory.push(newInventory);\n        })\n        setInventoryData(flattenedInventory);\n      }\n\n    }\n  })\n\n  const [createProduct, createProductResult ] = useMutation(CREATE_NEW_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"createProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n      showMessage({type: 'success', message: 'Success: Product Created'});\n\n    }\n  })\n  const [deleteProduct] = useMutation(DELETE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"deleteProduct result\",result)\n      modalProps.onCancel();\n      showMessage({type: 'success', message: 'Success: Product deleted'});\n      refetch();\n    }\n  })\n  const [updateProduct, updateProductResult ] = useMutation(UPDATE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"updateProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n      showMessage({type: 'success', message: 'Success: Product Updated'});\n    }\n  })\n\n  const onFinish = async (values) => {\n// console.log('onFinish',values)\n    const { images, category, ...restValues } = values;\n    let finalProductValue = {\n      ...restValues,\n      category: [],\n      images: [], \n      variants: productVariants\n    }\n\n    if (!values._id) {\n      delete finalProductValue._id;\n    }\n\n    // handle category\n    if (values.category) {\n      let foundSelectedCategory = productCategory.find(aCategory=>aCategory._id == values.category.key);\n      if (foundSelectedCategory && foundSelectedCategory._id) {\n        finalProductValue['category'] = [foundSelectedCategory];\n      }\n    }\n\n    // handle images\n    let imagesToBeModified = getImageFilesToModify(product && product.images ? product.images : [], fileList);\n    // if (imagesToBeModified.upload.length > 0 || imagesToBeModified.delete.length > 0) {\n    finalProductValue['images'] = imagesToBeModified.allImages;\n    // }\n\n    const QiniuAPI = await qiniuAPI();\n\n    if (imagesToBeModified.upload.length > 0) {\n      imagesToBeModified.upload.map(async (aNewImage)=>{\n        await QiniuAPI.upload(aNewImage)\n      })\n    }\n    if (imagesToBeModified.delete.length > 0) {\n      await QiniuAPI.batchDelete(imagesToBeModified.delete.map(anImage=>anImage.name))\n    }\n\n\n    if (!product) {\n      createProduct({\n        variables: {\n          product: finalProductValue\n        }\n      })\n    }\n    else {\n\n      let newInventory = [...inventoryData];\n\n      // handle variant\n      newInventory = newInventory.map((anInventory)=>{\n        const { key, ...restInventory} = anInventory;\n\n        //delete anInventory.key;\n        let variantObj = {}\n        Object.keys(productVariants).map((aKey)=>{\n          if (restInventory.hasOwnProperty(aKey)) {\n            variantObj[aKey] = restInventory[aKey];\n            delete restInventory[aKey];\n          }\n        });\n        restInventory['variants'] = variantObj;\n        return restInventory;\n      });\n\n      // handle deleted inventory\n      let deletedInventory = []\n      if (readInventoryResult.data && readInventoryResult.data.inventory) {\n        readInventoryResult.data.inventory.map((anInventory)=>{\n          let foundInventory = newInventory.map((aNewInventory)=>{return aNewInventory._id}).indexOf(anInventory._id);\n          if (foundInventory < 0) {\n            deletedInventory.push({...anInventory, deleted: true});\n          }\n        })\n      } \n\n      updateProduct({\n        variables: {\n          product: {...finalProductValue, _id: product._id},\n          inventory: newInventory.concat(deletedInventory)\n        }\n      })\n\n    }\n  }\n\n  const onDeleteProduct = () => {\n    confirmation('confirm',\"Confirm delete?\",async ()=>{\n      if (product.images && product.images.length > 0) {\n        const QiniuAPI = await qiniuAPI();\n        await QiniuAPI.batchDelete(product.images.map(anImage=>anImage.name))\n      }\n      deleteProduct({variables:{_id: product._id}})\n    })\n  }\n\n  // const checkFormTouched = () => {\n  //   console.log('isFieldsTouched',form.isFieldTouched('name'));\n  // }\n\n  const onCategoryNameChange = (e) => {\n    setNewCategoryName(e.target.value);\n  }\n\n  const addNewCategory = () => {\n    if (newCategoryName && newCategoryName != \"\") {\n      setProductCategory([...productCategory, {\n        _id: `category_${newCategoryName}_${new Date().getTime()}`,\n        name: newCategoryName\n      }]);\n      setNewCategoryName('')\n    }\n  }\n\n  const getModalFooter = () => {\n    const modalFooter = [\n      <Button key={'cancel'} onClick={modalProps.onCancel}>\n        Cancel\n      </Button>,\n      <Button key={'submit'} type=\"primary\" onClick={()=>{form.submit()}}>\n        {product ? \"Save\" : \"Save\"}\n      </Button>\n    ]\n  \n    if (product) {\n      modalFooter.unshift(\n        <Button key={'delete'} type=\"danger\" onClick={onDeleteProduct}>\n          Delete\n        </Button>\n      )\n    }\n    return modalFooter;\n  }\n\n  const getPreviewModalFooter = () => {\n    let isFav = previewImage && previewImage.fav;\n    return (\n      <Button \n        type={isFav ? 'primary': 'default'} \n        icon={isFav ? (<StarFilled style={{color: 'gold'}}/>) : (<StarOutlined/>) } \n        onClick={handleFavImageChange}\n      >\n        Favourite\n      </Button>\n    )\n  } \n\n  // const editImageOutput = (image) => {\n  //   if (image) {\n  //     const QiniuAPI = qiniuAPI();\n  //     let imageSrc = configCache.imageSrc;\n  //     var imgLink = QiniuAPI.imageMogr2({\n  //       \"auto-orient\": true,      // 布尔值，是否根据原图EXIF信息自动旋正，便于后续处理，建议放在首位。\n  //       strip: true,              // 布尔值，是否去除图片中的元信息\n  //       thumbnail: '1000x1000',    // 缩放操作参数\n  //       crop: '!300x400a10a10',    // 裁剪锚点参数\n  //       quality: 40,              // 图片质量，取值范围1-100\n  //       rotate: 20,               // 旋转角度，取值范围1-360，缺省为不旋转。\n  //       blur: '3x5'               // 高斯模糊参数\n  //     }, image.name, domain)\n  //   }\n  // }\n  return (\n    <div id=\"productForm\">\n    {/* <Button onClick={()=>{\n      console.log('category',categories)\n      console.log('inv',inventoryData)\n      console.log('productVariants',productVariants)\n      }}>inventoryData</Button> */}\n\n      <Collapse \n        defaultActiveKey={['1','2']} \n        //bordered={false}\n        expandIconPosition=\"right\"\n      >\n        <Panel header=\"Product Information\" key=\"1\">\n          <Form \n            name=\"complex-form\" \n            form={form} \n            onFinish={onFinish} \n            labelCol={{ span: 5 }} \n            wrapperCol={{ span: 16 }} \n          >\n            {\n              !product ? (\n                <Form.Item name={'_id'} label=\"ID\">\n                  <Input />\n                </Form.Item> \n              ) : null\n            }\n            <Form.Item name={'name'} label=\"Name\" rules={[{ required: true }]}>\n              <Input />\n            </Form.Item>\n            <Form.Item name={'description'} label=\"Description\">\n              <Input.TextArea rows={4} />\n            </Form.Item>\n            <Form.Item name={'category'} label=\"Category\">\n              <Select\n                style={{ width: 240 }}\n                placeholder=\"Select a category\"\n                labelInValue={true}\n                allowClear={true}\n                dropdownRender={menu => (\n                  <div>\n                    {menu}\n                    <Divider style={{ margin: '4px 0' }} />\n                    <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n                      <Input style={{ flex: 'auto' }} value={newCategoryName} onChange={onCategoryNameChange} required={true}/>\n                      <Button\n                        type=\"link\"\n                        icon={<PlusOutlined />}\n                        onClick={addNewCategory}\n                        disabled={newCategoryName.trim() != \"\" ? false : true}\n                      >\n                        New\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              >\n                {productCategory.map((item, index) => (\n                  <Option key={index} value={item._id}>{item.name}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item name={'published'} label=\"Published\" valuePropName=\"checked\">\n              <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" />\n            </Form.Item>\n\n            <Form.Item name={'images'} label=\"Images\">\n              <React.Fragment>\n                <Upload\n                  accept=\"image/*\"\n                  beforeUpload={ (file) => {\n                    return false;\n                  }}\n                  listType=\"picture-card\"\n                  multiple={true}\n                  fileList={fileList}\n                  onPreview={handlePreviewOpen}\n                  onChange={handleFileListChange}\n                  //showUploadList={{\n                  //  showDownloadIcon: true,\n                  //  downloadIcon: <StarFilled style={{color: 'yellow'}}/>\n                  //}}\n                  className={'productForm-upload'}\n                >\n                  {fileList.length < fileLimit ? uploadButton : null}\n                </Upload>\n                <Modal \n                  visible={previewVisible} \n                  footer={getPreviewModalFooter()} \n                  onCancel={handlePreviewClose}>\n                {/* <Modal visible={previewVisible} footer={null} onCancel={handlePreviewClose}> */}\n                  <img alt={`preview: ${previewImage ? previewImage.name : \"\"}`} style={{ width: '100%' }} src={previewImage ? previewImage.url || previewImage.thumbUrl : ''} />\n                  {/* <img alt=\"example\" style={{ width: '100%' }} src={()=>{editImageOutput(previewImage)}} /> */}\n                </Modal>\n              </React.Fragment>\n            </Form.Item>\n          </Form> \n\n        </Panel>\n        {\n          product ? (\n            <Panel header=\"Pricing & Variants\" key=\"2\">\n              <InventoryFormTable\n                productId={product._id}\n                inventoryData={inventoryData}\n                setInventoryData={setInventoryData}\n                productVariants={productVariants}\n                setProductVariants={setProductVariants}\n              />\n            </Panel>\n          ) : null\n        }\n        {/* {\n          product ? (\n            <Panel header=\"Related Products\" key=\"3\">\n              \n            </Panel>\n          ) : null\n        } */}\n      </Collapse>\n    </div>\n  )\n}\n\nconst ProductForm = (props) => {\n  const { product, categories = [], modalVisible, refetch, closeModal } = props;\n  const [ modalFooter, setModalFooter ] = useState([]);\n\n  let modalProps = {}\n  if (modalFooter) {\n    modalProps['footer'] = modalFooter;\n  }\n\n  return (\n    <Modal\n      title={product ? product.name : \"New Product\"}\n      width={'95%'}\n      visible={modalVisible}\n      onCancel={closeModal}\n      destroyOnClose\n      wrapClassName={'products-modalWrapper'}\n      //bodyStyle={{paddingLeft:'0'}} //for left tab\n      style={{overflow:\"hidden\"}}\n      //bodyStyle={{paddingTop:'0'}}\n      {...modalProps}\n    >\n      <ProductInfoForm\n        // product props\n        product={product} \n        categories={categories}\n        refetch={refetch}\n\n        // modal props\n        modalVisible={modalVisible}\n        onCancel={closeModal}\n        setModalFooter={setModalFooter}\n      />\n    </Modal>\n  )\n}\nexport default ProductForm;","import React, {useState} from 'react';\nimport Page_01 from './component/Page_01';\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Modal, Empty } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport ProductForm from './component/ProductForm';\nimport ProductCard from './component/ProductCard';\nimport Loading from '../../utils/component/Loading';\nimport { useConfigCache } from '../../utils/Constants';\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject, $configId: String) {\n    products(filter: $filter, configId: $configId) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst Products = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const configCache = useConfigCache();\n  const { data, loading, error, refetch } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      configId: configCache.configId\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const getProducts = (dataInput) => {\n    let result = [];\n    dataInput.products.map((aProduct, index)=>{\n      result.push(\n        <li key={index} className=\"products-card-item\" onClick={()=>{handleOnClickProduct(aProduct)}}>\n          <ProductCard product={aProduct}/>\n        </li>\n      )\n    })\n    return result;\n  }\n\n  return (\n    <Page_01\n      title={\"Products\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      <ul className=\"products-container\">\n        {\n          loading ? <Loading/> \n          : (error ? \"Error\" \n            : (data.products.length > 0 ? getProducts(data) : <li style={{width:'100%'}}><Empty/></li> ))\n        }\n      </ul>\n      <ProductForm\n          // product props\n          product={selectedProduct} \n          refetch={refetch}\n\n          // modal props\n          modalVisible={productFormModal}\n          closeModal={handleProductFormModalClose}\n        />\n    </Page_01>\n  )\n}\n\nexport default Products;\n","import React, {useState, useEffect} from 'react';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Table, Tag, Select, Form } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport { format } from 'date-fns';\n\nimport Page_01 from './component/Page_01';\nimport Loading from '../../utils/component/Loading';\nimport ProductForm from './component/ProductForm';\nimport { useConfigCache, getAllProductCategory } from '../../utils/Constants';\n\nconst { Option } = Select;\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject, $configId: String) {\n    products(filter: $filter, configId: $configId) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject, $configId: String) {\n    inventory(filter: $filter, configId: $configId) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_PUBLISH = gql`\n  mutation updateProductPublish($ids: [String!], $published: Boolean!) {\n    updateProductPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_INVENTORY_PUBLISH = gql`\n  mutation updateInventoryPublish($ids: [String!], $published: Boolean!) {\n    updateInventoryPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst Inventory = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const [ selectedItems, setSelectedItems ] = useState([]);\n  const [ displaySelectionPanel, setDisplaySelectionPanel ] = useState(false);\n\n  const [ selectedCategoryFilter, setSelectedCategoryFilter ] = useState(\"\");\n\n  const configCache = useConfigCache();\n  const { data: productsData, loading, error, refetch: refetchProducts } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      filter: {\n        sorter: {\n          createdAt: 1\n        }\n      },\n      configId: configCache.configId\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      // console.log('refetched products', result)\n    }\n  });\n\n  const { data: inventoryData, loading: inventoryLoading, error: inventoryError, refetch: refetchInventory } = useQuery(READ_PRODUCT_INVENTORY_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      configId: configCache.configId\n    },\n    onError: (error) => {\n      console.log(\"inventoryData error\", error)\n    },\n    onCompleted: (result) => {\n      // console.log('refetched inventory', result)\n    }\n  });\n\n  const [updateProductPublish] = useMutation(UPDATE_PRODUCT_PUBLISH,{\n    onCompleted: (result) => {\n      refetchProducts();\n    }\n  });\n  const [updateInventoryPublish] = useMutation(UPDATE_INVENTORY_PUBLISH,{\n    onCompleted: (result) => {\n      refetchInventory();\n    }\n  });\n\n\n  useEffect(()=>{\n    if (selectedItems.length > 0) {\n      if (!displaySelectionPanel) setDisplaySelectionPanel(true);\n    }\n    else {\n      if (displaySelectionPanel) setDisplaySelectionPanel(false)\n    }\n  },[selectedItems.length])\n\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const refetchData = () => {\n    refetchProducts();\n    refetchInventory();\n  }\n\n\n  let columns = [\n    {\n      title: 'No.',\n      dataIndex: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return index + 1 + '.';\n      }\n    },\n    {\n      title: \"Created At\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (text, record) => {\n        let result = record.name ? (<Button type=\"link\" onClick={()=>{handleOnClickProduct(record)}}>{record.name}</Button>) : null;\n        if (!result) {\n          let newName = \"\";\n          if (record.variants) {\n            \n            let variantKeys = Object.keys(record.variants);\n            variantKeys.map((aKey, index)=>{\n              newName += `${record.variants[aKey]} ${index == variantKeys.length - 1 ? \"\" : \"/ \"}`\n            })\n          }\n          else {\n            newName = \"-\";\n          }\n          result = newName;\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      render: (text, record) => {\n        let result = record.price;\n        if (!result) {\n          result = '-';\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Stock',\n      dataIndex: 'stock',\n      sorter: (a, b) => {\n        if (a.stock && b.stock) {\n          return a.stock - b.stock\n        }\n        return 0;\n      },\n      render: (text, record) => {\n        let result = record.stock;\n        if (!result) {\n          if (record.children && record.children.length > 0) {\n            let sum = 0;\n            record.children.map((aChild)=>{sum += aChild.stock});\n            result = sum;\n          }\n          else {\n            result = '-';\n          }\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Published',\n      dataIndex: 'published',\n      render: (text, record) => {\n        return (\n          record.published ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n        )\n      } \n    }\n  ]\n\n  \n\n  const selectionPanel = () => {\n    let inventoryIds = [];\n    let productIds = [];\n    selectedItems.map((anItem)=>{\n      if (anItem.productId && anItem.productId != \"\") {\n        inventoryIds.push(anItem._id)\n      }\n      else {\n        productIds.push(anItem._id)\n      }\n    });\n  \n    const updateToPublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: true\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: true\n          }\n        })\n      }\n    }\n    const updateToUnpublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: false\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: false\n          }\n        })\n      }\n    }\n\n    const clearSelection = () => {\n      setSelectedItems([])\n    }\n    return (\n      <div style={{display: 'flex'}}>\n        <Button type=\"primary\" size=\"small\" onClick={updateToPublish} style={{marginRight: '5px'}} disabled={!displaySelectionPanel}>Publish</Button>\n        <Button size=\"small\" onClick={updateToUnpublish} style={{marginRight: '5px'}} disabled={!displaySelectionPanel}>Unpublish</Button>\n        <Button size=\"small\" onClick={clearSelection}>Cancel</Button>\n      </div>\n    )\n  }\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      setSelectedItems(selectedRows);\n      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    onSelect: (record, selected, selectedRows) => {\n      // console.log(record, selected, selectedRows);\n    },\n    onSelectAll: (selected, selectedRows, changeRows) => {\n      // console.log(selected, selectedRows, changeRows);\n    },\n    selectedRowKeys: selectedItems.map((anItem)=>anItem._id)\n  };\n\n  const filterProductByCategory = (products) => {\n    let result = [];\n    if (selectedCategoryFilter != \"\" && selectedCategoryFilter != 'none') {\n      result = products.filter((aProduct)=>{\n        let found = aProduct.category.find((aCategory)=>{return aCategory._id == selectedCategoryFilter})\n        if (found) {\n          return true;\n        }\n        return false;\n      })\n    } \n    else if (selectedCategoryFilter == 'none') {\n      result = products.filter((aProduct)=>{\n        return aProduct.category.length == 0;\n      })\n    }\n    else {\n      result = products;\n    }\n    return result;\n  }\n\n  const getTableData = () => {\n    let result = [];\n    if (productsData && inventoryData && !error && !inventoryError) {\n      let inventoryWithKey = inventoryData.inventory.map((anInventory)=>{ return {...anInventory, key: anInventory._id} });\n      filterProductByCategory(productsData.products).map((aProduct,index)=>{\n        let productInventory = inventoryWithKey.filter((anInventory)=>anInventory.productId == aProduct._id);\n        aProduct['key'] = aProduct._id;\n        if (productInventory.length > 0) {\n          aProduct['children'] = productInventory;\n        }\n        result.push(aProduct)\n      });\n    }\n    return result;\n  }\n\n  let hasSelected = selectedItems.length > 0 ? true : false;\n  let allCategories = productsData && productsData.products ? getAllProductCategory(productsData.products) : []\n  let tableData = getTableData()\n\n  return (\n    <Page_01\n      title={\"Inventory\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      {/* <Form.Item label={'Filter'}> */}\n        <Select\n          placeholder=\"Category\"\n          onChange={(value)=>{\n            setSelectedCategoryFilter(value)\n          }}\n          defaultValue={selectedCategoryFilter}\n          style={{minWidth: '35%', marginBottom: '24px'}}\n        >\n          <Option key={'all'} value={\"\"}>All</Option>  \n          {\n            allCategories.map((aCategory,index)=>{\n              return (\n                <Option key={index} value={aCategory._id}>{aCategory.name}</Option>\n              )\n            })\n          }\n          <Option key={'none'} value={\"none\"}>Without Category</Option>  \n        </Select>\n      {/* </Form.Item> */}\n      <Table \n        columns={columns} \n        rowSelection={rowSelection} \n        dataSource={tableData} \n        pagination={false}\n        scroll={{x: columns.length * 150}}\n        size={'small'}\n      />\n      <div className={`inventory-selectionPanel ${displaySelectionPanel ? 'open' : 'close'}`}>\n        {selectionPanel()}\n      </div>\n\n      <ProductForm\n        // product props\n        product={selectedProduct} \n        categories={allCategories}\n        refetch={refetchData}\n\n        // modal props\n        modalVisible={productFormModal}\n        closeModal={handleProductFormModalClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Inventory;\n","import React from 'react';\nimport { Modal, Divider, Descriptions, List, Avatar } from 'antd';\nimport { format } from 'date-fns';\n\nimport { useConfigCache } from '../../../utils/Constants';\n\nconst OrderInfo = (props) => {\n  const { order, closeModal, visible, ...restProps } = props;\n  const configCache = useConfigCache();\n\n  const orderItems = (item) => {\n    let title = item.product.name;\n    let variant = \"\";\n    console.log('item',item)\n    let variantKeys = Object.keys(item.variant);\n    variantKeys.map((aKey, index)=>{\n      variant += `${item.variant[aKey].name}: ${item.variant[aKey].value}${index == variantKeys.length -1 ? \"\" : \", \"}`\n    })\n\n    let imageSrc = \"\";\n    if (configCache && item.product.image) {\n      imageSrc = configCache.imageSrc + item.product.image;\n    }\n    return (\n      <List.Item\n        actions={[\n          \"qty: \" + item.qty,\n          \"price: \" + item.price\n        ]}\n      >\n        <List.Item.Meta\n          avatar={\n            <Avatar shape=\"square\" src={imageSrc} />\n          }\n          title={title}\n          description={variant}\n        />\n      </List.Item>\n    )\n  }\n\n  return (\n    <Modal\n      title={\"Order\"}\n      width={'95%'}\n      visible={visible}\n      onCancel={closeModal}\n      footer={null}\n      //destroyOnClose\n      wrapClassName={'products-modalWrapper'}\n      style={{overflow:\"hidden\"}}\n    >\n    {\n      order ?\n      <React.Fragment>\n        <Divider orientation=\"left\">订单</Divider>\n        <Descriptions \n            size=\"small\"\n            bordered\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"编号\">{order._id}</Descriptions.Item>\n            <Descriptions.Item label=\"订购日期\">{format(new Date(order.createdAt), \"MM/dd/yyyy hh:mm:ss aa\")}</Descriptions.Item>\n            <Descriptions.Item label=\"付款状态\">\n                {\n                  order.paid ? \n                    <span style={{\"color\":\"green\"}}>已付款</span> : <span style={{\"color\":\"red\"}}>待付款</span>\n                }\n            </Descriptions.Item>\n            <Descriptions.Item label=\"货物状态\">{order.sentOut ? <span style={{\"color\":\"green\"}}>已出货 <small> (运单号: {order.trackingNum})</small></span>:<span style={{\"color\":\"red\"}}>未出货</span>}</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">收件人</Divider>\n        <Descriptions \n            id=\"buyerInfoTable\"\n            size=\"small\"\n            bordered\n            column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"名字\">{order.customer.name}</Descriptions.Item>\n            <Descriptions.Item label=\"电话号码\">{order.customer.contact}</Descriptions.Item>\n            <Descriptions.Item label=\"收件地址\">{order.customer.address}</Descriptions.Item>\n            <Descriptions.Item label=\"邮编\">{order.customer.postcode}</Descriptions.Item>\n            <Descriptions.Item label=\"省份\">{order.customer.province}</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">购买列表</Divider> \n        <List\n          itemLayout=\"horizontal\"\n          dataSource={order.items}\n          renderItem={orderItems}\n          //bordered\n          footer={(\n            <div className=\"orderInfo-item-summary\">\n              <Descriptions \n                bordered={true}\n                size=\"small\"\n                column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}\n                style={{maxWidth:\"100%\"}}\n              >\n                <Descriptions.Item label={\"邮费\"}>{order.deliveryFee ? order.deliveryFee : 0}</Descriptions.Item>\n                <Descriptions.Item label=\"总计\">{order.total}</Descriptions.Item>\n              </Descriptions>\n            </div>\n          )}\n        />\n        <div className=\"orderInfo-extra\">\n          {configCache.paymentQRImage ? \n            <div style={{textAlign:'center',flexGrow:1}}>\n              <img src={configCache.imageSrc + configCache.paymentQRImage} />\n            </div>\n            : null\n          }\n        {\n          order.sentOut && order.trackingNum ? (\n            <div style={{textAlign:'center',flexGrow:1}}>\n              <iframe src={`https://m.kuaidi100.com/app/query/?coname=indexall&nu=${order.trackingNum}`} style={{border:'none', maxWidth:'400px', height: '600px', textAlign:'center'}}></iframe>\n            </div>\n          ) : null\n        }\n        </div>\n      </React.Fragment>\n      : \"Not found\"\n    }\n  \n    </Modal>\n  )\n}\n\nexport default OrderInfo;","import React, {useState} from 'react';\nimport { Tabs, Table, Button, Input, Popconfirm } from 'antd';\nimport { format } from 'date-fns';\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { CheckOutlined } from '@ant-design/icons';\n\nimport Page_01 from './component/Page_01';\nimport OrderInfo from './component/OrderInfo';\nimport { useConfigCache } from '../../utils/Constants';\n\nconst { TabPane } = Tabs;\nconst { Search } = Input;\n\nconst GET_ORDERS_QUERY = gql`\n  query orders($filter: JSONObject, $configId: String) {\n    orders(filter: $filter, configId: $configId) {\n      _id\n      createdAt\n      updatedAt\n      items\n      total\n      customer\n      paid\n      sentOut\n      trackingNum\n      deliveryFee\n    }\n  }\n`;\n\nconst UPDATE_ORDER_PAYMENT_QUERY = gql`\n  mutation updateOrderPayment($_id: String!, $paid: Boolean!) {\n    updateOrderPayment(_id: $_id, paid: $paid) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_ORDER_DELIVERY_QUERY = gql`\n  mutation updateOrderDelivery($_id: String!, $trackingNum: String) {\n    updateOrderDelivery(_id: $_id, trackingNum: $trackingNum) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst CANCEL_ORDER_QUERY = gql`\n  mutation cancelOrder($_id: String!) {\n    cancelOrder(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\nconst Orders = (props) => {\n  const configCache = useConfigCache();\n  const [ orderModalDisplay, setOrderModalDisplay ] = useState(false);\n  const [ selectedOrder, setSelectedOrder ] = useState(null);\n\n  const { data, loading, error, refetch: refetchOrders } = useQuery(GET_ORDERS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      filter: {\n        sorter: {\n          createdAt: 'desc'\n        },\n      },\n      configId: configCache.configId\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const [ updateOrderPayment , updateOrderPaymentResult ] = useMutation(UPDATE_ORDER_PAYMENT_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const [ updateOrderDelivery , updateOrderDeliveryResult ] = useMutation(UPDATE_ORDER_DELIVERY_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const [ cancelOrder , cancelOrderResult ] = useMutation(CANCEL_ORDER_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const handleOrderModalDisplayOpen = (selectedOrder) => {\n    setOrderModalDisplay(true);\n    setSelectedOrder(selectedOrder)\n  }\n  const handleOrderModalDisplayClose = () => {\n    setOrderModalDisplay(false);\n  }\n\n  const defaultColumns = [\n    {\n      title: \"No.\",\n      dataIndex: 'index',\n      key: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return `${index + 1}.`;\n      }\n    },\n    {\n      title: \"订购日期\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: \"订单编号\",\n      dataIndex: '_id',\n      key: '_id',\n      render: (text, record) => {\n        return (\n          <a style={{whiteSpace:\"pre-wrap\", textDecoration:\"underline\"}} onClick={()=>{handleOrderModalDisplayOpen(record)}}>{record._id.toUpperCase()}</a>\n        )\n      }\n    },\n    {\n      title: \"收货人\",\n      dataIndex: 'customer',\n      key: 'customer',\n      sorter: (a, b) => a.name - b.name,\n      render: (text, record) => {\n        return text.name;\n      }\n    },\n    {\n      title: \"总计\",\n      dataIndex: 'total',\n      key: 'total',\n      sorter: (a, b) => a.total - b.total\n    }\n  ]\n\n  // {\n  //   title: \"货物状态\",\n  //   dataIndex: 'sentOut',\n  //   key: 'sentOut',\n  //   //width: 200,\n  //   render: (text, record) => {\n  //     return 'haha'\n  //   }\n  // },\n\n  let emptyTablePlaceholder = (\n      <div>空空如也</div>\n  )\n\n  const getColumnsByTable = () => {\n    \n    let tableCol1 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button size=\"small\" type={`${text ? \"primary\" : \"danger\"}`} onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"\",\n        dataIndex: 'action',\n        key: 'action',\n        render: (text, record) => {\n          const handleCancelOrder = () => {\n            cancelOrder({\n              variables: {\n                _id: record._id\n              }\n            })\n          }\n          return (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={handleCancelOrder}>\n              {/* <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>取消</div> */}\n          <Button type=\"danger\" size=\"small\">取消</Button>\n\n          {/* <Button type=\"danger\" size=\"small\" onClick={handleCancelOrder}>取消</Button> */}\n            </Popconfirm>\n          )\n        } \n      }\n    ]];\n    \n    let tableCol2 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button type={`${text ? \"primary\" : \"danger\"}`} size=\"small\" onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        width: 200,\n        render: (text, record) => {\n          let result = null;\n          if (record.sentOut && text) {\n            result = (\n              <div>{text}</div>\n            )\n          }\n          else {\n            const handleUpdateDelivery = (value) => {\n              updateOrderDelivery({\n                variables: {\n                  _id: record._id,\n                  trackingNum: value\n                }\n              })\n            }\n            result = (\n              <Search\n                placeholder=\"Enter tracking no.\"\n                enterButton={(<CheckOutlined />)}\n                size=\"small\"\n                onSearch={handleUpdateDelivery}\n              />\n            )\n          }\n          return result;\n        } \n      }\n    ]]\n\n    let tableCol3 = [...defaultColumns, ...[\n      {\n        title: \"Last Updated\",\n        dataIndex: 'updatedAt',\n        key: 'updatedAt',\n        sorter: (a, b) => new Date(a.updatedAt) - new Date(b.updatedAt),\n        render: (text, record) => {\n          let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n          return dateTime;\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        render: (text, record) => {\n          return text\n        } \n      }\n    ]]\n\n    return {\n      newOrders: tableCol1,\n      paidOrders: tableCol2,\n      completedOrders: tableCol3\n    }\n  }\n\n  const getFilteredOrders = () => {\n    let allOrders = data ? data.orders : [];\n    let orderList1 = [];\n    let orderList2 = [];\n    let orderList3 = [];\n    allOrders.map((anOrder)=>{\n      if (!anOrder.paid && !anOrder.sentOut) {\n        orderList1.push(anOrder);\n      }\n      else if (anOrder.paid && !anOrder.sentOut) {\n        orderList2.push(anOrder);\n      }\n      else if (anOrder.paid && anOrder.sentOut) {\n        orderList3.push(anOrder);\n      }\n    });\n    return {\n      newOrders: orderList1,\n      paidOrders: orderList2,\n      completedOrders: orderList3\n    }\n  }\n\n  let filteredColumns = getColumnsByTable();\n  let filteredOrders = getFilteredOrders();\n\n  const colWidth = 100;\n  return (\n    <Page_01\n      title={\"Orders\"}\n      //extra={[\n      //  <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} />\n      //]}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"New Orders\" key=\"1\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.newOrders} \n            dataSource={filteredOrders.newOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.newOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Paid Orders\" key=\"2\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.paidOrders} \n            dataSource={filteredOrders.paidOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.paidOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Completed Orders\" key=\"3\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.completedOrders} \n            dataSource={filteredOrders.completedOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.completedOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n      </Tabs>\n      <OrderInfo\n        order={selectedOrder}\n        visible={orderModalDisplay}\n        closeModal={handleOrderModalDisplayClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Orders;","import React, {useState, useEffect} from 'react';\nimport { Form, Upload, Input, Button, InputNumber } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport gql from 'graphql-tag';\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\n\nimport Page_01 from './component/Page_01';\nimport qiniuAPI from '../../utils/qiniuAPI';\nimport { useConfigCache, setConfigCache } from '../../utils/Constants';\nimport { showMessage } from '../../utils/component/notification';\n\nconst UPDATE_CONFIG_QUERY = gql`\n  mutation updateConfig($config: JSONObject, $configId: String!) {\n    updateConfig(config: $config, configId: $configId) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst Configuration = (props) => {\n  const configCache = useConfigCache();\n  const [ form ] = Form.useForm();\n  const [ fileList, setFileList ] = useState([]);\n\n  const fileLimit = 1;\n\n  const [ updateConfig ] = useMutation(UPDATE_CONFIG_QUERY,{\n    onCompleted: (result) => {\n      console.log('UPDATE_CONFIG_QUERY',result.updateConfig.data.value);\n      setConfigCache(result.updateConfig.data.value)\n      showMessage({type: 'success', message: 'Success: Configuration Updated'})\n    },\n    onError: (error) => {\n      console.log('UPDATE_CONFIG_QUERY err',error)\n      showMessage({type: 'success', message: 'Error: Error while updating Configuration'})\n\n    }\n  })\n\n  useEffect(()=>{\n    if (configCache != null) {\n      if (configCache.paymentQRImage && configCache.paymentQRImage != '') {\n        setFileList([{\n          uid: configCache.paymentQRImage,\n          url: configCache.imageSrc + configCache.paymentQRImage,\n          thumbUrl: configCache.imageSrc + configCache.paymentQRImage\n        }])\n      }\n\n      form.setFieldsValue({\n        notice: configCache.profile.notice,\n        delivery: configCache.delivery\n      })\n    }\n  },[configCache]);\n\n  // const props2 = {\n  //   listType: 'picture',\n  //   defaultFileList: [...fileList],\n  //   className: 'upload-list-inline',\n  // };\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  );\n  \n  const handleFileListChange = ({ fileList: newFileList }) => {\n    setFileList(newFileList)\n  };\n\n  const handleSubmit = async (values) => {\n    console.log('handleSubmit',values)\n    console.log('filelist',fileList)\n\n    let setter = {\n      'profile.notice': values.notice,\n      'delivery': values.delivery\n    }\n\n    let paymentQRChanged = false;\n    let currentPaymentQRImage = configCache.paymentQRImage;\n    let paymentQRImageResult = \"\";\n    if (fileList.length > 0) {\n      if (fileList[0].originFileObj && currentPaymentQRImage != fileList[0].name) {\n        let imageNameSplited = fileList[0].name.split('.');\n        let newImageName = `saas_payment_${new Date().getTime()}_${imageNameSplited[imageNameSplited.length - 2]}.${imageNameSplited[imageNameSplited.length - 1]}`;\n        paymentQRImageResult = newImageName;\n        paymentQRChanged = true;\n      }\n    }\n    else {\n      if (currentPaymentQRImage != \"\") {\n        paymentQRImageResult = \"\";\n        paymentQRChanged = true;\n      }\n    }\n\n    if (configCache && configCache.configId) {\n      if (paymentQRChanged) {\n        setter['paymentQRImage'] = paymentQRImageResult;\n\n        const QiniuAPI = await qiniuAPI();\n\n        if (paymentQRImageResult != \"\") {\n          let newFileObject = {...fileList[0], name: paymentQRImageResult}\n          await QiniuAPI.upload(newFileObject)\n          if (currentPaymentQRImage != \"\") {\n            await QiniuAPI.batchDelete([configCache.paymentQRImage])\n          }\n        }\n        else {\n          if (currentPaymentQRImage != \"\") {\n            await QiniuAPI.batchDelete([configCache.paymentQRImage])\n          }\n        }\n      }\n      updateConfig({\n        variables: {\n          config: setter,\n          configId: configCache.configId\n        }\n      })\n    }\n\n\n\n  }\n\n  let deliveryConfig = {\n    'type': 'static',\n    \n  }\n  return (\n    <Page_01\n      title={\"Configuration\"}\n    >\n      <Form form={form} onFinish={handleSubmit} layout=\"vertical\">\n        <Form.Item label=\"Notice\" name=\"notice\">\n          <Input.TextArea/>\n        </Form.Item>\n        <Form.Item label=\"Delivery Fee (Static)\" name=\"delivery\">\n          <InputNumber/>\n        </Form.Item>\n        <Form.Item label=\"Payment QR\" name=\"paymentQRImage\">\n          {/* <ImgCrop rotate> */}\n            <Upload\n              accept=\"image/*\"\n              beforeUpload={ (file) => {\n                console.log(\"beforeUpload\",file)\n                return false;\n              }}\n              //multiple={true}\n              listType=\"picture-card\"\n              fileList={fileList}\n              onChange={handleFileListChange}\n              customRequest={()=>{\n                console.log('haha')\n              }}\n            >\n              {fileList.length < fileLimit ? uploadButton : null}\n            </Upload>\n          {/* </ImgCrop> */}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" onClick={()=>{form.submit()}}>Save</Button>\n        </Form.Item>\n      </Form>\n    </Page_01>\n  )\n}\n\nexport default Configuration;","import React from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { useUserCache, useConfigCache } from '../Constants';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  let routeLocation = useLocation();\n  const defaultRoute = \"/login\";\n\n  const userResult = useUserCache();\n  const configResult = useConfigCache();\n  \n  let loggedIn = false;\n  if (userResult && userResult.success && configResult) {\n    loggedIn = true;\n  }\n\n  return (\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    <Route {...rest} render={props => (\n      loggedIn ?\n        <Component {...props} />\n        : <Redirect to={{\n                  pathname: defaultRoute,\n                  state: { from: routeLocation }\n              }} />\n    )} />\n  );\n};\n\nexport default PrivateRoute;\n\n/*\ntype of page route\nprivate route = only user who logged in can see\neg. products/inventory pages\n\npublic route (not restricted) = anyone can see\neg. main page/not sensitive info\n\npublic route (restricted) = only user who is not logged in can see\neg. login page\n\n*/","import React from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { useUserCache, useConfigCache } from '../Constants';\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  let routeLocation = useLocation();\n\n  const defaultRoute = \"/\";\n  const userResult = useUserCache();\n  const configResult = useConfigCache();\n  \n  let loggedIn = false;\n  if (userResult && userResult.success && configResult) {\n    loggedIn = true;\n  }\n\n  return (\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    <Route {...rest} render={props => (\n      loggedIn && restricted ?\n        <Redirect to={{\n            pathname: defaultRoute,\n            state: { from: routeLocation }\n        }} />\n        : <Component {...props} />\n    )} />\n  );\n};\n\nexport default PublicRoute;","import React from 'react';\n\nconst PageNotFound = () => {\n    return (\n        <div>\n            404: Page Not Found\n        </div>\n    )\n}\n\nexport default PageNotFound;","import React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport { Button } from \"antd\";\n\nimport logo from './logo.svg';\n\nimport './css/index.css';\n\nimport * as Component from './component/index.js';\nimport Login from './component/page/Login';\nimport Products from './component/page/Products';\nimport Inventory from './component/page/Inventory';\nimport Orders from './component/page/Orders';\nimport Configuration from './component/page/Configuration';\nimport Page_01 from './component/page/component/Page_01';\n\nimport PrivateRoute from './utils/component/PrivateRoute';\nimport PublicRoute from './utils/component/PublicRoute';\nimport PageNotFound from './utils/component/PageNotFound';\nimport Loading from './utils/component/Loading';\nimport { useConfigCache } from './utils/Constants';\n\n\nlet Component_Layout = Component['Layout_01'];\nlet Component_Header = Component['Header_01'];\n// let Component_Footer = Component['Header_01'];\n\nconst App = (props) => {\n  const [ loggedIn, setLoggedIn ] = useState(false);\n  const configCache = useConfigCache();\n\n  useEffect(()=>{\n    if (configCache) {\n      setLoggedIn(true)\n    }\n    else {\n      setLoggedIn(false)\n    }\n  },[configCache]);\n  \n  const Main = () => {\n    return (\n      <div>\n        Main\n      </div>\n    )\n  }\n\n  return (\n    <Router>\n      <Component_Layout\n        header={loggedIn ? (<Component_Header/>) : null}\n        footer={loggedIn ? \"2020\" : null}\n      >\n        <Switch>\n          {/* <PrivateRoute exact path={'/products'} component={Products}/> */}\n          <PrivateRoute exact path={'/'} component={Inventory} />\n          <PrivateRoute exact path={'/main'} component={Main} />\n          <PrivateRoute exact path={'/orders'} component={Orders} />\n          <PrivateRoute exact path={'/configuration'} component={Configuration} />\n          <PublicRoute restricted={true} exact path={'/login'} component={Login} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </Component_Layout>\n    </Router>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\n\n// import './css/base.css';\nimport App from './App';\nimport ApolloClientAPI from './utils/ApolloClientAPI';\nimport { setUserCache, setConfigCache } from './utils/Constants';\nimport * as serviceWorker from './serviceWorker';\n\nconst GET_LOGGED_IN_USER = gql`\n  query loggedInUser{\n    loggedInUser{\n        success\n        message\n        data\n    }\n  }\n`\n\nconst GET_USER_CONFIG = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\n\nconst theClientAPI = ApolloClientAPI();\nexport default theClientAPI;\nconst { client, cache, ...restClient } = theClientAPI;\nclient.writeData({\n  data: {\n    user: null,\n    config: null\n  },\n})\nconst run = () => {\n  const doRender = (userData=null,configData=null) => {\n    if (userData != null && configData != null) {\n      setUserCache(userData, client)\n      setConfigCache(configData, client)\n    }\n    // cache.writeData({\n    //   data: {\n    //     user: userData,\n    //     config: configData\n    //   },\n    // })\n    ReactDOM.render((\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    ),document.getElementById('root'));\n  }\n\n  restClient.query(GET_LOGGED_IN_USER).then(result=>{\n    let userResult = result.data.loggedInUser;\n    // console.log('userResult',userResult)\n    restClient.query(GET_USER_CONFIG,{\n      configId: userResult.data.configId\n    }).then(result2=>{\n      let configResult = result2.data.userConfig.data;\n      // console.log('configResult',configResult)\n      doRender(userResult, configResult)\n    }).catch((error2)=>{\n      console.log('error2',error2)\n      doRender()\n    })\n  }).catch(error=>{\n    console.log('error',error)\n    doRender()\n  })\n  \n}\n\nconst init = () => {\n  run();\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}